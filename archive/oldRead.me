
**‚ö†Ô∏è Important**: Always test SSH access from a new terminal before closing your current session. Keep Proxmox console access available as a backup method.

## üìÅ Output Files

All scripts create timestamped files in `/root/`:

### Initial Hardening Output
```
/root/ssh-hardening-report-TIMESTAMP.txt     # Complete setup report
/root/ssh-generated-keys-TIMESTAMP/          # Private & public keys
/root/ssh-hardening-backups-TIMESTAMP/       # Original file backups
/root/ssh-hardening-rollback-TIMESTAMP.sh    # Emergency recovery script
```

### Configuration Changes Output
```
/root/ssh-config-changes-TIMESTAMP.txt       # Change summary
/root/ssh-config-backups-TIMESTAMP/          # File backups
/root/ssh-config-rollback-TIMESTAMP.sh       # Rollback script
```

## ‚ö° Example Workflows

### Scenario 1: New Proxmox LXC Container
```bash
# 1. Initial hardening
curl -fsSL https://raw.githubusercontent.com/ValkyrieNexus/proxmox-ssh-hardening/main/ssh-hardening.sh | sudo bash

# 2. Test connection (in new terminal)
ssh -i /root/ssh-generated-keys-*/admin_ed25519 -p 2222 admin@your-server-ip

# 3. Download private keys to your local machine
scp -P 2222 admin@your-server-ip:/root/ssh-generated-keys-*/admin_ed25519 ~/.ssh/
```

### Scenario 2: Multi-Location Access (MacBook User)
```bash
# Configure access from office and multiple home networks
sudo ./ssh-multi-ip-config.sh

# Enter networks when prompted:
# - 10.0.0.0/8        (office/Teleport)
# - 192.168.1.0/24    (home subnet 1)
# - 192.168.50.0/24   (home subnet 2)
```

### Scenario 3: Adding New SSH Key
```bash
# Use the configuration manager
sudo ./ssh-config-manager.sh
# Select: 3) Add/remove authorized SSH keys
# Select: 1) Add new SSH key to user
```

## üö® Emergency Recovery

### If Locked Out via SSH
1. **Use Proxmox Console** to access the container/VM directly
2. **Run the rollback script:**
   ```bash
   sudo /root/ssh-*-rollback-TIMESTAMP.sh
   ```
3. **Or restore manually:**
   ```bash
   sudo cp /root/ssh-*-backups-TIMESTAMP/sshd_config.*.bak /etc/ssh/sshd_config
   sudo systemctl restart ssh
   ```

### Connection After Hardening
```bash
# Standard connection
ssh -i ~/.ssh/your_private_key -p 2222 admin@your-server-ip

# With specific key and verbose output
ssh -i ~/.ssh/admin_ed25519 -p 2222 -v admin@your-server-ip
```

## üîß Requirements

- **Operating System:** Debian 10+, Ubuntu 18.04+, Proxmox LXC/VM
- **Access Level:** Root privileges required
- **Dependencies:** OpenSSH server, systemctl
- **Network:** Outbound internet access for downloads

## ‚ö†Ô∏è Security Considerations

### Before Running
- ‚úÖ **Test on non-production systems first**
- ‚úÖ **Ensure Proxmox console access is available**
- ‚úÖ **Have alternative access methods ready**
- ‚úÖ **Review network ranges and firewall rules**

### After Running
- ‚úÖ **Test SSH connection immediately** (don't close current session)
- ‚úÖ **Save private keys securely** on your local machine
- ‚úÖ **Update SSH client configuration** with new port
- ‚úÖ **Configure firewall rules** for new SSH port if needed

### Best Practices
- üîê **Use strong passphrases** for private keys (auto-generated)
- üîí **Store private keys securely** (use SSH agent, encrypted storage)
- üåê **Restrict network access** using AllowUsers with specific IPs/subnets
- üìù **Keep configuration reports** for documentation
- üîÑ **Regular backups** of SSH configurations

## üêõ Troubleshooting

### Common Issues

**Issue: SSH connection refused after hardening**
```bash
# Check if SSH is running on new port
sudo netstat -tlnp | grep :2222
# or
sudo ss -tlnp | grep :2222

# Check SSH service status
sudo systemctl status ssh
```

**Issue: Permission denied (publickey)**
```bash
# Verify key permissions
chmod 600 ~/.ssh/your_private_key

# Test with verbose output
ssh -i ~/.ssh/your_private_key -p 2222 -v admin@your-server-ip
```

**Issue: Connection timeout**
```bash
# Check firewall rules
sudo ufw status
# Add rule for new SSH port
sudo ufw allow 2222/tcp
```

### Getting Help

1. **Check the generated report files** for configuration details
2. **Use the validation script** to verify setup
3. **Review SSH logs:** `sudo journalctl -u ssh -f`
4. **Test configuration:** `sudo sshd -t`

## üìú License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## ü§ù Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## ‚≠ê Acknowledgments

- Built for Proxmox homelab environments
- Optimized for multi-location access scenarios
- Designed with safety and recoverability in mind

---

**‚ö†Ô∏è Important:** Always test SSH access before closing your current sess
